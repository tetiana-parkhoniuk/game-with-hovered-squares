{"version":3,"sources":["App.module.css","components/SquaresLogger/SquaresLogger.module.css","components/ModePicker/ModePicker.module.css","components/Button/Button.module.css","services/fetchAPI.js","redux/presets/presets-operations.js","redux/presets/presets-selectors.js","components/ModePicker/ModePicker.js","components/Button/Button.js","components/GameField/GameField.js","components/SquaresLogger/SquaresLogger.js","App.js","redux/presets/presets-slice.js","redux/store.js","index.js"],"names":["module","exports","axios","defaults","baseURL","fetchPresets","a","get","response","data","createAsyncThunk","_","rejectWithValue","presetsAPI","presets","console","log","message","presetsOperations","getPresets","state","modes","presetsSelectors","getModes","createSelector","Object","keys","map","mode","size","field","ModePicker","options","onChange","modeOptions","value","label","replace","className","styles","select","placeholder","selectedMode","Button","text","onClick","isDisabled","startBtn","disabled","GameField","onCellHover","gameField","Array","i","j","row","cell","style","backgroundColor","onMouseEnter","e","event","target","handleHoveredCell","Math","random","SquaresLogger","logMessages","loggerTitle","loggerList","logMessage","loggerListItem","App","dispatch","useDispatch","useSelector","useState","appMode","setAppMode","fieldSize","setFieldSize","isStarted","setStarted","setField","logs","setLogs","stateRef","useRef","current","useEffect","app","playground","optionsContainer","newMode","find","includes","filter","el","logger","length","presetsSlice","createSlice","name","initialState","status","error","extraReducers","pending","fulfilled","payload","rejected","store","configureStore","reducer","presetsReducer","middleware","thunk","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0da810d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"playground\":\"App_playground__1yxRx\",\"optionsContainer\":\"App_optionsContainer__3hktT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loggerTitle\":\"SquaresLogger_loggerTitle__kz2SP\",\"loggerList\":\"SquaresLogger_loggerList__1FsQw\",\"loggerListItem\":\"SquaresLogger_loggerListItem__1WmRx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"ModePicker_select__2GwXm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"startBtn\":\"Button_startBtn__16w2v\"};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://demo1030918.mockable.io/';\n\nexport const fetchPresets = async () => {\n  const response = await axios.get('/');\n  return response.data;\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as presetsAPI from 'services/fetchAPI';\n\nconst fetchPresets = createAsyncThunk(\n  'presets/fetchPresets',\n  async (_, { rejectWithValue }) => {\n    try {\n      const presets = await presetsAPI.fetchPresets();\n      return presets;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\nconst presetsOperations = {\n  fetchPresets,\n};\n\nexport default presetsOperations;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getPresets = state => state.presets.modes;\n\nconst getModes = createSelector(getPresets, modes => {\n  return Object.keys(modes).map(mode => ({\n    mode,\n    size: modes[mode].field,\n  }));\n});\n\nconst presetsSelectors = {\n  getPresets,\n  getModes,\n};\n\nexport default presetsSelectors;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Select from 'react-select';\nimport styles from './ModePicker.module.css';\n\nexport default function ModePicker({ options, onChange }) {\n  const modeOptions = options.map(({ mode }) => ({\n    value: mode,\n    label: mode.replace('Mode', ''),\n  }));\n\n  const handleModelChange = selectedMode => {\n    onChange(selectedMode.value);\n  };\n\n  return (\n    <Select\n      className={styles.select}\n      placeholder=\"Pick me\"\n      options={modeOptions}\n      onChange={handleModelChange}\n    />\n  );\n}\n\nModePicker.propTypes = {\n  options: propTypes.array.isRequired,\n  onChange: propTypes.func.isRequired,\n};\n","import propTypes from 'prop-types';\nimport styles from './Button.module.css';\n\nexport default function Button({ text, onClick, isDisabled }) {\n  return (\n    <button className={styles.startBtn} onClick={onClick} disabled={isDisabled}>\n      {text}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  text: propTypes.string.isRequired,\n  onClick: propTypes.func.isRequired,\n  isDisabled: propTypes.bool.isRequired,\n};\n","import propTypes from 'prop-types';\nimport styles from './GameField.module.css';\n\nexport default function GameField({ size, onCellHover }) {\n  if (!size) {\n    return null;\n  }\n  let gameField = new Array(size);\n  for (let i = 0; i < size; i++) {\n    gameField[i] = new Array(size);\n  }\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      gameField[i][j] = `row ${i + 1} col ${j + 1}`;\n    }\n  }\n\n  const handleHoveredCell = (event, cell) => {\n    if (event.target.style.backgroundColor === 'white') {\n      event.target.style.backgroundColor = 'rgb(136, 197, 246)';\n    } else {\n      event.target.style.backgroundColor = 'white';\n    }\n    onCellHover(cell);\n  };\n\n  return (\n    <table>\n      <tbody>\n        {gameField.map(row => {\n          return (\n            <tr key={Math.random()}>\n              {row.map(cell => {\n                return (\n                  <td\n                    className={styles.field}\n                    style={{ backgroundColor: 'white' }}\n                    key={Math.random()}\n                    onMouseEnter={e => handleHoveredCell(e, cell)}\n                  />\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nGameField.propTypes = {\n  size: propTypes.number.isRequired,\n  onCellHover: propTypes.func.isRequired,\n};\n","import propTypes from 'prop-types';\nimport styles from './SquaresLogger.module.css';\n\nexport default function SquaresLogger({ logMessages }) {\n  return (\n    <>\n      <h2 className={styles.loggerTitle}>Hover Squares</h2>\n      <ul className={styles.loggerList}>\n        {logMessages.map(logMessage => (\n          <li key={Math.random()} className={styles.loggerListItem}>\n            {logMessage}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nSquaresLogger.propTypes = {\n  logMessages: propTypes.array.isRequired,\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { presetsOperations, presetsSelectors } from 'redux/presets';\nimport ModePicker from 'components/ModePicker';\nimport Button from 'components/Button';\nimport GameField from 'components/GameField';\nimport SquaresLogger from 'components/SquaresLogger/SquaresLogger';\nimport styles from './App.module.css';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const modes = useSelector(presetsSelectors.getModes);\n  const [appMode, setAppMode] = useState();\n  const [fieldSize, setFieldSize] = useState();\n  const [isStarted, setStarted] = useState(false);\n  const [field, setField] = useState([]);\n  const [logs, setLogs] = useState([]);\n  const stateRef = useRef([]);\n\n  stateRef.current = logs;\n\n  const createField = () => {\n    setField(\n      <GameField\n        size={fieldSize}\n        onCellHover={logMessage => {\n          if (stateRef.current.includes(logMessage)) {\n            setLogs(stateRef.current.filter(el => el !== logMessage));\n          } else {\n            setLogs([logMessage, ...stateRef.current]);\n          }\n        }}\n      />,\n    );\n    setLogs([]);\n  };\n\n  useEffect(() => {\n    dispatch(presetsOperations.fetchPresets());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (appMode) {\n      setFieldSize(appMode.size);\n    }\n  }, [appMode, fieldSize]);\n\n  const handleModePickerChange = selectedMode => {\n    const newMode = modes.find(({ mode }) => mode === selectedMode);\n    setAppMode(newMode);\n  };\n\n  const toggleStart = () => {\n    setStarted(!isStarted);\n  };\n\n  const handleBtnClick = () => {\n    if (appMode) {\n      setFieldSize(appMode.size);\n      createField();\n      toggleStart();\n    }\n  };\n\n  return (\n    <div className={styles.app}>\n      <section className={styles.playground}>\n        <div className={styles.optionsContainer}>\n          <ModePicker options={modes} onChange={handleModePickerChange} />\n          <Button\n            text={isStarted ? 'STOP' : 'START'}\n            onClick={handleBtnClick}\n            isDisabled={!fieldSize}\n          />\n        </div>\n        {isStarted && <div>{field}</div>}\n      </section>\n      <section className={styles.logger}>\n        {logs.length > 0 && isStarted && <SquaresLogger logMessages={logs} />}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { presetsOperations } from '.';\n\nconst presetsSlice = createSlice({\n  name: 'presets',\n  initialState: {\n    modes: [],\n    status: null,\n    error: null,\n  },\n  extraReducers: {\n    [presetsOperations.fetchPresets.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    [presetsOperations.fetchPresets.fulfilled]: (state, { payload }) => {\n      state.modes = payload;\n      state.status = 'fulfilled';\n      state.error = null;\n    },\n    [presetsOperations.fetchPresets.rejected]: (state, { payload }) => {\n      state.status = 'rejected';\n      state.error = payload;\n    },\n  },\n});\n\nexport default presetsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport presetsReducer from './presets/presets-slice';\n\nexport const store = configureStore({\n  reducer: {\n    presets: presetsReducer,\n  },\n  middleware: [thunk, logger],\n  devTools: process.env.NODE_ENV === 'development',\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}